LoadPackage("ACE");
TCENUM := ACETCENUM;;
LoadPackage("FR");


B3 := SurfaceBraidFpGroup(3,0,1);

x := B3.2^(-1) * B3.1;
y := B3.1 * B3.2^(-1);
equinodals_G3 := [B3.1^(-1) * B3.2 * B3.1, B3.2 * B3.1 * B3.2^(-1), x*B3.2*x^(-1), y*B3.1*y^(-1)];
antinodals_G3 := [B3.1^3, B3.2^3, B3.2^(-1)*B3.1^3*B3.2, B3.1 * B3.2^3 * B3.1^(-1)];
G3_gens := Concatenation(equinodals_G3, antinodals_G3);
G3_gens_squares := List(G3_gens, g -> g^2);
G3 := Subgroup(B3, G3_gens);
H3 := NormalClosure(G3,G3_gens_squares);
nat3 := NaturalHomomorphismByNormalSubgroup(G3,H3);
L3 := Image(nat3);

iso3_gens := IsomorphismFpGroupByGenerators(G3, G3_gens);
iso3 := IsomorphismFpGroup(G3);
fp3 := Image(iso3);
fp3_gens := Image(iso3_gens);

Print("### 3 Strands ###", "\n", "\n");

Print("## Best Presentation ##", "\n", "\n");
Print(fp3, "\n");
Print(RelatorsOfFpGroup(fp3), "\n");

Print("## Equi/Anti Presentation ##", "\n", "\n");

Print(fp3_gens, "\n");
Print(RelatorsOfFpGroup(fp3_gens), "\n");

Print("\n", "### 4 Strands ###", "\n", "\n");

B4 := SurfaceBraidFpGroup(4,0,1);

G4_gens := [B4.1^(3), B4.2^(3), B4.3^(3), B4.1^(-1)*B4.2*B4.1,
			B4.1^(-1)*B4.3^(3)*B4.1, B4.2^(-1)*B4.1^(3)*B4.2, B4.2^(-1)*B4.3*B4.2,
 			B4.3^(-1)*B4.1*B4.3*B4.1^(2), B4.3^(-1)*B4.2^(3)*B4.3,
 			B4.1^(-2)*B4.2*B4.1*B4.2, B4.1^(-2)*B4.3^(3)*B4.1^(2), B4.1^(-1)*B4.3^(-1)*B4.1*B4.3,
 			B4.1^(-1)*B4.3^(-1)*B4.2^(3)*B4.3*B4.1,
 			B4.2^(-1)*B4.1^(-1)*B4.2^(2)*B4.1^(2), B4.2^(-1)*B4.1^(-1)*B4.3*B4.1*B4.2,
 			B4.2^(-2)*B4.1*B4.2^(2), B4.2^(-2)*B4.3*B4.2*B4.3,
 			B4.3^(-1)*B4.2^(-1)*B4.1*B4.2*B4.3, B4.3^(-1)*B4.2^(-1)*B4.3^(2)*B4.2^(2),
			B4.3^(-2)*B4.1*B4.3^(2)*B4.1^(2), B4.3^(-2)*B4.2*B4.3^(2),
 			B4.1^(-2)*B4.2^(-1)*B4.1*B4.2*B4.1^(2), B4.1^(-2)*B4.2^(-1)*B4.3^(3)*B4.2*B4.1^(2),
 			B4.1^(-2)*B4.3^(-1)*B4.1*B4.3*B4.1, B4.1^(-2)*B4.3^(-1)*B4.2*B4.3*B4.1^(2),
 			B4.1^(-1)*B4.3^(-1)*B4.2^(-1)*B4.1^(2)*B4.2^(2)*B4.3, B4.1^(-1)*B4.3^(-1)*B4.2^(-1)*B4.3*B4.2*B4.3*B4.1,
 			B4.1^(-1)*B4.3^(-2)*B4.1*B4.3^(2), B4.1^(-1)*B4.3^(-2)*B4.2^(3)*B4.3^(2)*B4.1,
 			B4.2^(-1)*B4.1^(-2)*B4.2*B4.1^(2)*B4.2, B4.2^(-1)*B4.1^(-2)*B4.3*B4.1^(2)*B4.2,
 			B4.2^(-2)*B4.3^(-1)*B4.1*B4.3*B4.2^(2), B4.2^(-2)*B4.3^(-1)*B4.2*B4.3*B4.2^(2),
 			B4.3^(-1)*B4.2^(-2)*B4.1*B4.2*B4.3*B4.1, B4.3^(-1)*B4.2^(-2)*B4.3*B4.2^(2)*B4.3,
 			B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.1*B4.3*B4.2*B4.1^(2),
 			B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.2^(2)*B4.3^(2)*B4.1^(2),
 			B4.1^(-2)*B4.3^(-2)*B4.1*B4.3^(2)*B4.1,
 			B4.1^(-2)*B4.3^(-2)*B4.2*B4.3*B4.2*B4.1^(2),
 			B4.1^(-1)*B4.3^(-1)*B4.2^(-2)*B4.1*B4.2^(2)*B4.3*B4.1,
 			B4.1^(-1)*B4.3^(-1)*B4.2^(-2)*B4.3*B4.2*B4.3^(2)*B4.1,
 			B4.1^(-1)*B4.3^(-2)*B4.2^(-1)*B4.1*B4.2*B4.3^(2)*B4.1,
 			B4.1^(-1)*B4.3^(-2)*B4.2^(-1)*B4.3^(2)*B4.2^(2)*B4.3*B4.1,
 			B4.3^(-1)*B4.2^(-2)*B4.1^(-1)*B4.2*B4.1*B4.2^(2)*B4.3,
 			B4.3^(-1)*B4.2^(-2)*B4.1^(-1)*B4.3*B4.1*B4.2^(2)*B4.3,
 			B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.1*B4.3^(2)*B4.2*B4.1^(2),
 			B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2*B4.3^(2)*B4.2*B4.1^(2),
 			B4.1^(-2)*B4.3^(-2)*B4.2^(-1)*B4.1^(2)*B4.2^(2)*B4.3^(2)*B4.1,
 			B4.1^(-2)*B4.3^(-2)*B4.2^(-1)*B4.3*B4.2*B4.3^(2)*B4.1^(2),
 			B4.1^(-1)*B4.3^(-1)*B4.2^(-2)*B4.3^(-1)*B4.1*B4.3*B4.2^(2)*B4.3*B4.1,
 			B4.1^(-1)*B4.3^(-1)*B4.2^(-2)*B4.3^(-1)*B4.2*B4.3*B4.2^(2)*B4.3*B4.1,
 			B4.1^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1*B4.2*B4.3^(2)*B4.1^(2),
 			B4.1^(-1)*B4.3^(-2)*B4.2^(-2)*B4.3*B4.2^(2)*B4.3^(2)*B4.1,
 			B4.1^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2*B4.1*B4.2^(2)*B4.3^(2)*B4.1,
 			B4.1^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.3*B4.1*B4.2^(2)*B4.3^(2)*B4.1];
G4 := Subgroup(B4, G4_gens);

iso4_gens := IsomorphismFpGroupByGenerators(G4, G4_gens);
iso4 := IsomorphismFpGroup(G4);
fp4 := Image(iso4);
fp4_gens := Image(iso4_gens);

Print("## Best Presentation ##", "\n", "\n");
Print(fp4, "\n");
Print(RelatorsOfFpGroup(fp4), "\n");

Print("## Our Sage Presentation ##", "\n", "\n");

Print(fp4_gens, "\n");
Print(RelatorsOfFpGroup(fp4_gens), "\n");

Print("\n", "### 4 Strands with Equi/Antinodals ###");


G4_equi := [B4.1^(-1)*B4.2*B4.1,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.1*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-1)*B4.2*B4.1*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.1*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.3*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.1*B4.3*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.1*B4.3^2*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2*B4.3^2*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2*B4.1*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-1)*B4.3*B4.1*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3*B4.1^2*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.1*B4.2*B4.1^2*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.1*B4.3*B4.2*B4.1^2*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.2*B4.3*B4.2*B4.1^2*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-1)*B4.1*B4.2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.3*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2*B4.1*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-1)*B4.3*B4.1*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-1)*B4.3*B4.2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.1*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.1*B4.3*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.2*B4.3*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-1)*B4.1^(-1)*B4.2*B4.1*B4.2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-1)*B4.1^(-1)*B4.3*B4.1*B4.2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2^(-1)*B4.3*B4.2*B4.1*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2];

G4_anti := [B4.1^3,
		 	B4.2^3,
			B4.3^3,
			B4.1^3,
			B4.1^(-1)*B4.3^3*B4.1,
			B4.1^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2*(B4.2^2*B4.1^2)^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^3*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.3^3*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2^3*B4.1*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.3^3*B4.1*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^3*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^3*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-1)*B4.3^2*(B4.3*B4.1)^2*B4.1*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^3*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^3*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.3^2*(B4.3*B4.1^2)^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^3*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.2^3*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^3*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^3*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.2^3*B4.3*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2*(B4.2^2*B4.1^2)^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2*(B4.2^2*B4.1^2)^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^3*B4.1^2,
			B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^3*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.1^2,
			B4.1^3,
			B4.1^(-2)*B4.2^3*B4.1^2,
			B4.1^(-2)*B4.3^3*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-1)*B4.1^3*B4.2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^3*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2*(B4.2^2*B4.1^2)^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-1)*B4.1^3*B4.2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2^(-1)*B4.1^2*(B4.1*B4.2)^2*B4.2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2^3*B4.1*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2];
G4_equianti_gens := Concatenation(G4_anti, G4_equi);

G4_equianti := Subgroup(B4, G4_equianti_gens);
G4_equianti_squares := List(G4_equianti_gens, g -> g^2);
# H4 := NormalClosure(G4,G4_equianti_squares : hard, Wo := 10^7);
# L4 := G4/H4;


iso4_equianti := IsomorphismFpGroup(G4_equianti);

fp4_equianti := Image(iso4_equianti);
fp4_squares := List(G4_equianti_squares, g -> iso4_equianti(g));
H4_fp := NormalClosure(fp4_equianti, fp4_squares);
nat4_fp := NaturalHomomorphismByNormalSubgroup(fp4_equianti,H4_fp);

nat4 := CompositionMapping(nat4_fp, iso4_equianti);
L4_fp := Image(nat4_fp);
L4 := Image(nat4);

Print("## Best Presentation ##", "\n", "\n");
Print(fp4_equianti, "\n", "\n");

#Print("## Presentation of G4/<<equi^2/anti^2>> ##", "\n", "\n");
#Print(RelatorsOfFpGroup(fp4_equianti), "\n");

# Print("## Our Equi/Anti Presentation ##", "\n", "\n");
#
#
# iso4_equianti_gens := IsomorphismFpGroupByGenerators(G4_equianti, G4_equianti);
# fp4_equianti_gens := Image(iso4_equianti_gens);
# Print(fp4_equianti_gens, "\n");
# Print(RelatorsOfFpGroup(fp4_equianti_gens), "\n", "\n");

# Verify Best Possible Presentations
G3_best_gens := [B3.1^3, B3.1^(-1) * B3.2 * B3.1];
G4_best_gens := [B4.1^3, B4.1^(-1) * B4.2 * B4.1, B4.3*B4.2 * B4.3^(-1)];
G3_best := Subgroup(B3, G3_best_gens);
G4_best := Subgroup(B4, G4_best_gens);
Print("## Verify that G3_best,G4_best are G3,G4 and give Presentations ##", "\n", "\n");
Print("[G3 : G3_best] = ", Index(G3, G3_best), "\n");
Print("[G4 : G4_best] = ", Index(G4, G4_best), "\n");
iso3_best := IsomorphismFpGroupByGenerators(G3_best,G3_best_gens);
iso4_best := IsomorphismFpGroupByGenerators(G4_best,G4_best_gens);

Print("G3 relators: ", RelatorsOfFpGroup(Image(iso3_best)), "\n");
G4_relate := Unique(RelatorsOfFpGroup(Image(iso4_best)));
Print("G4 relators: ", G4_relate, "\n","\n");

Print("G4 # of relators: ", Length(G4_relate),"\n");

B5 := SurfaceBraidFpGroup(5,0,1);
G5_unopt_gens := [B5.1^3, B5.2^3, B5.3^3, B5.4^3,
 B5.2^2*B5.1^2*B5.2^(-1)*B5.1^(-1),
 B5.2*B5.1*B5.2^(-1),
 B5.1*B5.2^3*B5.1^(-1),
 B5.3*B5.2*B5.3^(-1),
 B5.1*B5.3*B5.2^3*B5.3^(-1)*B5.1^(-1),
 B5.3^2*B5.2^2*B5.3^(-1)*B5.2^(-1),
 B5.2^2*B5.1*B5.4*B5.3*B5.2*B5.1*B5.2^(-1)*B5.3^(-2)*B5.4^(-1)*B5.2^(-1),
 B5.2*B5.3^3*B5.2^(-1),
 B5.4*B5.3*B5.4^(-1),
 B5.1*B5.2*B5.3*B5.2^(-1)*B5.1^(-1),
 B5.1*B5.2^2*B5.3^2*B5.2^(-1)*B5.3^(-1)*B5.1^(-1),
 B5.4^2*B5.3^2*B5.4^(-1)*B5.3^(-1),
 B5.2*B5.4*B5.3^3*B5.4^(-1)*B5.2^(-1),
 B5.1*B5.2*B5.4*B5.3^3*B5.4^(-1)*B5.2^(-1)*B5.1^(-1),
 B5.1*B5.2*B5.4^2*B5.3*B5.2*B5.4^(-1)*B5.3^(-1)*B5.1^(-1),
 B5.1*B5.2^2*B5.4*B5.3*B5.4*B5.2^(-1)*B5.3^(-1)*B5.1^(-1),
 B5.3*B5.4^3*B5.3^(-1),
 B5.1*B5.3*B5.2*B5.4*B5.3*B5.4^(-1)*B5.2^(-1)*B5.3^(-1)*B5.1^(-1),
 B5.2*B5.3*B5.4*B5.3^(-1)*B5.2^(-1),
 B5.2*B5.3^2*B5.4^2*B5.3^(-1)*B5.4^(-1)*B5.2^(-1),
 B5.1*B5.2^2*B5.3*B5.4*B5.3^(-1)*B5.2^(-2)*B5.1^(-1),
 B5.3^2*B5.4*B5.3^(-2),
 B5.3*B5.4^2*B5.3*B5.4^(-2)*B5.3^(-1),
 B5.2*B5.4*B5.3^2*B5.2^2*B5.3^(-1)*B5.4^(-1)*B5.2^(-2),
 B5.1*B5.2*B5.4*B5.3^2*B5.4*B5.2^(-2)*B5.3^(-1)*B5.1^(-1),
 B5.2*B5.3^2*B5.2*B5.3^(-2)*B5.2^(-1),
 B5.2*B5.4^2*B5.3*B5.4^(-2)*B5.2^(-1),
 B5.2^2*B5.4*B5.3^3*B5.4^(-1)*B5.2^(-2),
 B5.2^2*B5.4^2*B5.3^2*B5.2^(-1)*B5.3^(-1)*B5.4^(-2),
 B5.1*B5.2*B5.4^2*B5.3^2*B5.1*B5.2^(-1)*B5.3^(-1)*B5.4^(-2),
 B5.2^2*B5.3*B5.2^(-2),
 B5.2*B5.4*B5.3^2*B5.4*B5.3^(-2)*B5.4^(-1)*B5.2^(-1),
 B5.1*B5.2*B5.4^2*B5.3^3*B5.4^(-2)*B5.2^(-1)*B5.1^(-1),
 B5.1*B5.2^2*B5.4*B5.3^3*B5.4^(-1)*B5.2^(-2)*B5.1^(-1),
 B5.1*B5.2^2*B5.4^2*B5.3*B5.4^(-2)*B5.2^(-2)*B5.1^(-1),
 B5.1*B5.2*B5.4*B5.3^2*B5.2*B5.4^(-2)*B5.3^(-1)*B5.1^(-1),
 B5.1*B5.2^2*B5.1*B5.2^(-2)*B5.1^(-1),
 B5.4^2*B5.3*B5.2^3*B5.3^(-1)*B5.4^(-2),
 B5.1*B5.3*B5.2^2*B5.1^2*B5.2^(-1)*B5.3^(-1)*B5.1^(-2),
 B5.1^2*B5.3*B5.4*B5.2*B5.4*B5.1*B5.3^(-2)*B5.4^(-1)*B5.2^(-1)*B5.1^(-1),
 B5.1^2*B5.3*B5.4*B5.2*B5.1*B5.3^(-1)*B5.4^(-2)*B5.2^(-1)*B5.1^(-1),
 B5.1*B5.3*B5.4^2*B5.2*B5.3^(-1)*B5.4^(-1)*B5.2^(-2)*B5.1^(-1),
 B5.1*B5.3*B5.2^2*B5.4*B5.3^(-1)*B5.4^(-2)*B5.2^(-1)*B5.1^(-1),
 B5.1*B5.3*B5.2^2*B5.1*B5.4*B5.3^(-1)*B5.4^(-2)*B5.2^(-2),
 B5.1^2*B5.2*B5.1^(-2),
 B5.1*B5.3*B5.2^2*B5.3*B5.2^(-2)*B5.3^(-1)*B5.1^(-1),
 B5.1*B5.4^2*B5.3*B5.2*B5.3^(-1)*B5.4^(-2)*B5.1^(-1),
 B5.1^2*B5.3*B5.4*B5.2*B5.3*B5.1^(-1)*B5.2^(-1)*B5.3^(-1)*B5.4^(-2),
 B5.1^2*B5.4^2*B5.3*B5.2^2*B5.1^(-1)*B5.2^(-1)*B5.3^(-1)*B5.4^(-2),
 B5.1^2*B5.3*B5.4*B5.2*B5.4*B5.3*B5.4^(-1)*B5.1^(-1)*B5.2^(-2),
 B5.1^2*B5.3*B5.2^2*B5.3^2*B5.2^(-1)*B5.3^(-2)*B5.1^(-2),
 B5.1^2*B5.3^2*B5.2^2*B5.1^(-1)*B5.2^(-1)*B5.3^(-2),
 B5.1*B5.3^2*B5.2*B5.3^(-2)*B5.1^(-1),
 B5.1^2*B5.3*B5.2^3*B5.3^(-1)*B5.1^(-2),
 B5.2*B5.4*B5.3^2*B5.2*B5.1^2*B5.2^(-1)*B5.3^(-1)*B5.4^(-1)*B5.1^(-1)*B5.2^(-2),
 B5.2^2*B5.4*B5.3^2*B5.4*B5.1^(-1)*B5.2^(-2)*B5.3^(-1)*B5.1^(-1),
 B5.3^2*B5.2*B5.1^3*B5.2^(-1)*B5.3^(-2),
 B5.2^2*B5.1*B5.4*B5.3^2*B5.4^(-1)*B5.2^(-1)*B5.4^(-1)*B5.3^(-1)*B5.1^(-2),
 B5.2^2*B5.1*B5.4*B5.3*B5.2^3*B5.3^(-1)*B5.4^(-1)*B5.1^(-1)*B5.2^(-2),
 B5.2^2*B5.1*B5.4^2*B5.3*B5.2^(-1)*B5.4^(-1)*B5.3^(-1)*B5.1^(-2),
 B5.4^2*B5.3*B5.2^2*B5.1*B5.2^(-2)*B5.3^(-1)*B5.4^(-2),
 B5.3^2*B5.2*B5.1^2*B5.2*B5.1^(-2)*B5.2^(-1)*B5.3^(-2),
 B5.4^2*B5.3*B5.2*B5.1^2*B5.3^(-2)*B5.4^(-2)*B5.2^(-1)*B5.1^(-1),
 B5.4^2*B5.3*B5.2^2*B5.3*B5.2^(-2)*B5.3^(-1)*B5.4^(-2),
 B5.1^2*B5.3*B5.2^2*B5.1*B5.2^(-2)*B5.3^(-1)*B5.1^(-2),
 B5.1*B5.2^2*B5.4*B5.3^2*B5.4*B5.3^(-2)*B5.4^(-1)*B5.2^(-2)*B5.1^(-1),
 B5.2^2*B5.1*B5.4*B5.3*B5.2^2*B5.3*B5.4^(-1)*B5.3^(-1)*B5.2^(-2)*B5.3^(-1)*B5.1^(-2),
 B5.1*B5.2*B5.4^2*B5.3^2*B5.2*B5.3^(-2)*B5.4^(-2)*B5.2^(-1)*B5.1^(-1),
 B5.1*B5.2*B5.4^2*B5.3^2*B5.4*B5.3^(-2)*B5.4^(-2)*B5.2^(-1)*B5.1^(-1),
 B5.1*B5.2^2*B5.4*B5.3^2*B5.2*B5.3^(-2)*B5.4^(-1)*B5.2^(-2)*B5.1^(-1),
 B5.2^2*B5.4*B5.3^2*B5.2*B5.3^(-2)*B5.4^(-1)*B5.2^(-2),
 B5.2^2*B5.1*B5.4*B5.3*B5.2^2*B5.1*B5.2^(-2)*B5.3^(-1)*B5.4^(-1)*B5.1^(-1)*B5.2^(-2),
 B5.1^2*B5.3*B5.4*B5.2^2*B5.3*B5.2^(-2)*B5.4^(-1)*B5.3^(-1)*B5.1^(-2),
 B5.1^2*B5.3*B5.4*B5.2^2*B5.4*B5.3*B5.2^(-2)*B5.3^(-1)*B5.4^(-1)*B5.1^(-1)*B5.2^(-2),
 B5.1^2*B5.3*B5.2^2*B5.3*B5.4^3*B5.3^(-1)*B5.2^(-2)*B5.3^(-1)*B5.1^(-2),
 B5.1^2*B5.3*B5.2^2*B5.3*B5.4^2*B5.3*B5.4^(-2)*B5.3^(-1)*B5.2^(-2)*B5.3^(-1)*B5.1^(-2)];
G5_unopt := Subgroup(B5, G5_unopt_gens);
Print("Index of G5 = ", Index(B5, G5_unopt), "\n");
G5_core := Core(B5, G5_unopt);
Print("Index of Core(G5) in B5 = ", Index(B5,G5_core), "\n");
PushOptions(rec(Wo := 10^7));
Coxeter_5_3 := NormalClosure(B5, [B5.1^3, B5.2^3, B5.3^3, B5.4^3]);
# Checks that Coxeter_5_3 lies inside of G5_core
Print("Index of Coxeter_5_3 int G5_core in Coxeter_5_3 = ", Index(Coxeter_5_3, Intersection(Coxeter_5_3, G5_core)), "\n");
Print("Index of Coxeter_5_3 int G5_core in G5_core = ", Index(G5_core, Intersection(Coxeter_5_3, G5_core)), "\n");

pure_braid_gens := function(gens,n)
	local lst,h,to_conj_lst,i,j;
	lst := [];
	for i in [1..n] do
		for j in [(i+1)..n] do
			to_conj_lst := [(j-1)..(i+1)];
			Apply(to_conj_lst, k -> gens[k]);
			h := Product(Append([gens[1]^0],to_conj_lst));
			Print(h,"\n");
			Print(gens[i],"\n");
			Add(lst,h * ((gens[i])^2) * h^(-1));
		od;
	od;
	return lst;
end;

#B6 := SurfaceBraidFpGroup(6,0,1);
#G6_unopt_gens := [B6.1^3,
# B6.2^3,
# B6.3^3,
# B6.4^3,
# B6.5^3,
# B6.2^2*B6.1^2*B6.2^(-1)*B6.1^(-1),
# B6.2*B6.1*B6.2^(-1),
# B6.1*B6.2^3*B6.1^(-1),
# B6.3*B6.2*B6.3^(-1),
# B6.1*B6.3*B6.2^3*B6.3^(-1)*B6.1^(-1),
# B6.3^2*B6.2^2*B6.3^(-1)*B6.2^(-1),
# B6.2^2*B6.1*B6.4*B6.3*B6.2*B6.1*B6.2^(-1)*B6.3^(-2)*B6.4^(-1)*B6.2^(-1),
# B6.2*B6.3^3*B6.2^(-1),
# B6.4*B6.3*B6.4^(-1),
# B6.1*B6.2*B6.3*B6.2^(-1)*B6.1^(-1),
# B6.1*B6.2^2*B6.3^2*B6.2^(-1)*B6.3^(-1)*B6.1^(-1),
# B6.4^2*B6.3^2*B6.4^(-1)*B6.3^(-1),
# B6.2*B6.4*B6.3^3*B6.4^(-1)*B6.2^(-1),
# B6.1*B6.2*B6.4*B6.3^3*B6.4^(-1)*B6.2^(-1)*B6.1^(-1),
# B6.1*B6.2*B6.4^2*B6.3*B6.2*B6.4^(-1)*B6.3^(-1)*B6.1^(-1),
# B6.1*B6.2^2*B6.4*B6.3*B6.4*B6.2^(-1)*B6.3^(-1)*B6.1^(-1),
# B6.1*B6.2*B6.5^2*B6.4*B6.3^2*B6.4^(-1)*B6.5^(-1)*B6.3^(-1)*B6.4^(-1)*B6.2^(-1)*B6.1^(-1),
# B6.5^2*B6.4*B6.3*B6.2*B6.1^2*B6.4^(-1)*B6.5^(-1)*B6.3^(-1)*B6.4^(-1)*B6.2^(-1)*B6.1^(-1),
# B6.3*B6.4^3*B6.3^(-1),
# B6.5*B6.4*B6.5^(-1),
# B6.3*B6.5*B6.3*B6.2*B6.4*B6.3*B6.2*B6.3^(-1)*B6.4^(-2)*B6.5^(-1)*B6.3^(-1),
# B6.1*B6.3*B6.2*B6.4*B6.3*B6.4^(-1)*B6.2^(-1)*B6.3^(-1)*B6.1^(-1),
# B6.2*B6.3*B6.4*B6.3^(-1)*B6.2^(-1),
# B6.2*B6.3^2*B6.4^2*B6.3^(-1)*B6.4^(-1)*B6.2^(-1),
# B6.1*B6.3*B6.2*B6.5*B6.4*B6.3*B6.4*B6.3^(-1)*B6.5^(-1)*B6.2^(-2)*B6.1^(-1),
# B6.1*B6.2*B6.4*B6.3*B6.5*B6.4*B6.3*B6.4^(-1)*B6.5^(-2)*B6.2^(-1)*B6.1^(-1),
# B6.5^2*B6.4^2*B6.5^(-1)*B6.4^(-1),
# B6.3*B6.5*B6.4^3*B6.5^(-1)*B6.3^(-1),
# B6.2*B6.3*B6.5*B6.4^3*B6.5^(-1)*B6.3^(-1)*B6.2^(-1),
# B6.1*B6.2^2*B6.5*B6.3*B6.4^2*B6.3^(-1)*B6.4^(-1)*B6.5^(-1)*B6.2^(-1)*B6.3^(-1)*B6.1^(-1),
# B6.1*B6.2^2*B6.5^2*B6.3*B6.4*B6.5*B6.3^(-1)*B6.4^(-1)*B6.5^(-1)*B6.2^(-1)*B6.3^(-1)*B6.1^(-1),
# B6.2*B6.3*B6.5^2*B6.4*B6.3*B6.5^(-1)*B6.4^(-1)*B6.2^(-1),
# B6.2*B6.3^2*B6.5*B6.4*B6.5*B6.3^(-1)*B6.4^(-1)*B6.2^(-1),
# B6.4*B6.5^3*B6.4^(-1),
# B6.2*B6.4*B6.3*B6.5*B6.4*B6.5^(-1)*B6.3^(-1)*B6.4^(-1)*B6.2^(-1),
# B6.1*B6.2*B6.4*B6.3*B6.5*B6.4^3*B6.5^(-1)*B6.3^(-1)*B6.4^(-1)*B6.2^(-1)*B6.1^(-1),
# B6.1*B6.2^2*B6.4*B6.3*B6.5^2*B6.4^(-1)*B6.5^(-1)*B6.2^(-1)*B6.3^(-1)*B6.1^(-1),
# B6.3*B6.4*B6.5*B6.4^(-1)*B6.3^(-1),
# B6.3*B6.4^2*B6.5^2*B6.4^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.2*B6.3^2*B6.4*B6.5*B6.4^(-1)*B6.3^(-2)*B6.2^(-1),
# B6.4^2*B6.5*B6.4^(-2),
# B6.4*B6.5^2*B6.4*B6.5^(-2)*B6.4^(-1),
# B6.1*B6.2*B6.4*B6.3*B6.5*B6.4^2*B6.3*B6.4^(-2)*B6.5^(-1)*B6.3^(-1)*B6.4^(-1)*B6.2^(-1)*B6.1^(-1),
# B6.3*B6.5*B6.4^2*B6.3^2*B6.4^(-1)*B6.3^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.2*B6.3*B6.5*B6.4^2*B6.5*B6.3^(-2)*B6.4^(-1)*B6.2^(-1),
# B6.3*B6.4^2*B6.3*B6.4^(-2)*B6.3^(-1),
# B6.3*B6.5^2*B6.4*B6.5^(-2)*B6.3^(-1),
# B6.3*B6.5*B6.3*B6.4^3*B6.3^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.3*B6.5^2*B6.3*B6.4^2*B6.3^(-1)*B6.4^(-1)*B6.5^(-2),
# B6.2*B6.3*B6.5^2*B6.4^2*B6.2*B6.3^(-1)*B6.4^(-1)*B6.5^(-2),
# B6.3*B6.5^2*B6.3*B6.2*B6.1^2*B6.4^(-2)*B6.5^(-1)*B6.3^(-1)*B6.4^(-1)*B6.2^(-1)*B6.1^(-1),
# B6.1*B6.3*B6.2*B6.5*B6.4*B6.3^2*B6.5^(-2)*B6.4^(-1)*B6.2^(-2)*B6.1^(-1),
# B6.3^2*B6.4*B6.3^(-2),
# B6.3*B6.5*B6.4^2*B6.5*B6.4^(-2)*B6.5^(-1)*B6.3^(-1),
# B6.1*B6.3*B6.2^2*B6.5*B6.4*B6.3*B6.5^(-2)*B6.4^(-1)*B6.2^(-1)*B6.1^(-1),
# B6.3*B6.5*B6.3*B6.2*(B6.1*B6.4)^2*B6.5^(-2)*B6.3^(-1)*B6.4^(-1)*B6.2^(-1)*B6.1^(-1),
# B6.2*B6.3*B6.5^2*B6.4^3*B6.5^(-2)*B6.3^(-1)*B6.2^(-1),
# B6.2*B6.3^2*B6.5*B6.4^3*B6.5^(-1)*B6.3^(-2)*B6.2^(-1),
# B6.2*B6.3^2*B6.5^2*B6.4*B6.5^(-2)*B6.3^(-2)*B6.2^(-1),
# B6.2*B6.3*B6.5*B6.4^2*B6.3*B6.5^(-2)*B6.4^(-1)*B6.2^(-1),
# B6.1*B6.2^2*B6.5^2*B6.3*B6.4^3*B6.3^(-1)*B6.5^(-2)*B6.2^(-2)*B6.1^(-1),
# B6.1*B6.2^2*B6.3*B6.4*B6.3^(-1)*B6.2^(-2)*B6.1^(-1),
# B6.2*B6.3^2*B6.2*B6.3^(-2)*B6.2^(-1),
# B6.5^2*B6.4*B6.3^3*B6.4^(-1)*B6.5^(-2),
# B6.2*B6.4*B6.3^2*B6.2^2*B6.3^(-1)*B6.4^(-1)*B6.2^(-2),
# B6.1*B6.2*B6.4*B6.3^2*B6.4*B6.2^(-2)*B6.3^(-1)*B6.1^(-1),
# B6.1*B6.2*B6.4*B6.3*B6.5^2*B6.3*B6.4^(-1)*B6.5^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-1),
# B6.2^2*B6.4*B6.3*B6.5^2*B6.2*B6.4^(-2)*B6.5^(-1)*B6.3^(-1)*B6.2^(-1),
# B6.2^2*B6.4*B6.3*B6.5*B6.2*B6.4^(-1)*B6.5^(-2)*B6.3^(-1)*B6.2^(-1),
# B6.2*B6.4*B6.5^2*B6.3*B6.4^(-1)*B6.5^(-1)*B6.3^(-2)*B6.2^(-1),
# B6.2*B6.4*B6.3^2*B6.5*B6.4^(-1)*B6.5^(-2)*B6.3^(-1)*B6.2^(-1),
# B6.2*B6.4*B6.3^2*B6.2*B6.5*B6.4^(-1)*B6.3^(-1)*B6.5^(-2)*B6.3^(-1),
# B6.2^2*B6.3*B6.2^(-2),
# B6.2*B6.4*B6.3^2*B6.4*B6.3^(-2)*B6.4^(-1)*B6.2^(-1),
# B6.2*B6.5^2*B6.4*B6.3*B6.4^(-1)*B6.5^(-2)*B6.2^(-1),
# B6.2^2*B6.5^2*B6.4*B6.3^2*B6.2^(-1)*B6.3^(-1)*B6.4^(-1)*B6.5^(-2),
# B6.1*B6.2*B6.4*B6.3*B6.5*B6.4*B6.1*B6.2^(-1)*B6.3^(-1)*B6.4^(-1)*B6.5^(-2),
# B6.2^2*B6.4*B6.3*B6.5*B6.4*B6.2^(-1)*B6.3^(-1)*B6.4^(-1)*B6.5^(-2),
# B6.2^2*B6.4*B6.3*B6.5^2*B6.4*B6.2^(-1)*B6.3^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.2*B6.4^2*B6.3*B6.4^(-2)*B6.2^(-1),
# B6.2^2*B6.4*B6.3^3*B6.4^(-1)*B6.2^(-2),
# B6.2^2*B6.4^2*B6.3^2*B6.2^(-1)*B6.3^(-1)*B6.4^(-2),
# B6.1*B6.2*B6.4^2*B6.3^2*B6.1*B6.2^(-1)*B6.3^(-1)*B6.4^(-2),
# B6.1*B6.2^2*B6.4*B6.3*B6.5*B6.4*B6.5^(-1)*B6.3^(-1)*B6.4^(-1)*B6.2^(-2)*B6.1^(-1),
# B6.1*B6.2*B6.4*B6.3^2*B6.5*B6.4*B6.5^(-1)*B6.3^(-2)*B6.4^(-1)*B6.2^(-1)*B6.1^(-1),
# B6.1*B6.2^2*B6.4*B6.3^2*B6.5*B6.4^(-1)*B6.3^(-1)*B6.5^(-2)*B6.2^(-2)*B6.1^(-1),
# B6.1*B6.2*B6.4*B6.3^2*B6.2*B6.4^(-2)*B6.3^(-1)*B6.1^(-1),
# B6.2^2*B6.1*B6.4*B6.3*B6.2*B6.5*B6.4^(-1)*B6.5^(-2)*B6.3^(-2)*B6.1^(-2),
# B6.1*B6.2*B6.4*B6.3*B6.5*B6.4^2*B6.1*B6.2^(-1)*B6.3^(-1)*B6.5^(-2)*B6.3^(-1),
# B6.1*B6.2^2*B6.5^2*B6.3*B6.4*B6.3*B6.5^(-1)*B6.4^(-1)*B6.2^(-2)*B6.1^(-1),
# B6.1*B6.2^2*B6.5^2*B6.4*B6.3*B6.4^(-1)*B6.5^(-2)*B6.2^(-2)*B6.1^(-1),
# B6.1*B6.2*B6.4^2*B6.3^3*B6.4^(-2)*B6.2^(-1)*B6.1^(-1),
# B6.1*B6.2^2*B6.4*B6.3^3*B6.4^(-1)*B6.2^(-2)*B6.1^(-1),
# B6.1*B6.2^2*B6.4^2*B6.3*B6.4^(-2)*B6.2^(-2)*B6.1^(-1),
# B6.1*B6.2^2*B6.1*B6.2^(-2)*B6.1^(-1),
# B6.1*B6.3*B6.2^2*B6.1^2*B6.2^(-1)*B6.3^(-1)*B6.1^(-2),
# B6.3*B6.5*B6.4^2*B6.3*B6.2^2*B6.3^(-1)*B6.4^(-1)*B6.2^(-1)*B6.3^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.3*B6.5*B6.3*B6.4^2*B6.5*B6.2^(-1)*B6.3^(-2)*B6.4^(-1)*B6.2^(-1),
# B6.4^2*B6.3*B6.2^3*B6.3^(-1)*B6.4^(-2),
# B6.3*B6.5*B6.3*B6.2*B6.4*B6.3^3*B6.4^(-1)*B6.2^(-1)*B6.3^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.3*B6.5^2*B6.3*B6.2*B6.4*B6.5^(-1)*B6.3^(-1)*B6.4^(-1)*B6.2^(-2),
# B6.3*B6.5*B6.3*B6.2*B6.4^2*B6.5^(-2)*B6.3^(-1)*B6.4^(-1)*B6.2^(-2),
# B6.1^2*B6.2*B6.1^(-2),
# B6.1*B6.3*B6.2^2*B6.3*B6.2^(-2)*B6.3^(-1)*B6.1^(-1),
# B6.1*B6.3*B6.2*B6.5*B6.4^2*B6.3*B6.4^(-2)*B6.5^(-1)*B6.2^(-1)*B6.3^(-1)*B6.1^(-1),
# B6.1*B6.3*B6.2*B6.5*B6.4*B6.5*B6.3^(-1)*B6.4^(-1)*B6.2^(-2)*B6.1^(-1),
# B6.1*B6.3*B6.2^2*B6.5*B6.4*B6.5*B6.3^(-2)*B6.4^(-1)*B6.2^(-1)*B6.1^(-1),
# B6.1^2*B6.3*B6.2*B6.4^2*B6.1*B6.3^(-2)*B6.4^(-1)*B6.2^(-1)*B6.1^(-1),
# B6.1^2*B6.3*B6.2*B6.4*B6.1*B6.3^(-1)*B6.4^(-2)*B6.2^(-1)*B6.1^(-1),
# B6.1*B6.3*B6.4^2*B6.2*B6.3^(-1)*B6.4^(-1)*B6.2^(-2)*B6.1^(-1),
# B6.1*B6.3*B6.2^2*B6.4*B6.3^(-1)*B6.4^(-2)*B6.2^(-1)*B6.1^(-1),
# B6.1*B6.3*B6.2^2*B6.1*B6.4*B6.3^(-1)*B6.4^(-2)*B6.2^(-2),
# B6.1*B6.3*B6.2^2*B6.1*B6.5*B6.4*B6.3*B6.5^(-2)*B6.4^(-1)*B6.2^(-2),
# B6.1^2*B6.3*B6.2^2*B6.4^2*B6.5*B6.3*B6.4^(-1)*B6.5^(-2)*B6.2^(-1)*B6.3^(-2)*B6.1^(-2),
# B6.1^2*B6.3*B6.2^2*B6.3^2*B6.2^(-1)*B6.3^(-2)*B6.1^(-2),
# B6.1^2*B6.3^2*B6.2^2*B6.1^(-1)*B6.2^(-1)*B6.3^(-2),
# B6.1*B6.3^2*B6.2*B6.3^(-2)*B6.1^(-1),
# B6.1^2*B6.3*B6.2^3*B6.3^(-1)*B6.1^(-2),
# B6.1*B6.5^2*B6.4*B6.3*B6.2*B6.3^(-1)*B6.4^(-1)*B6.5^(-2)*B6.1^(-1),
# B6.1*B6.3*B6.5*B6.4^2*B6.3*B6.2^3*B6.3^(-1)*B6.4^(-2)*B6.5^(-1)*B6.3^(-1)*B6.1^(-1),
# B6.1^2*B6.5^2*B6.4*B6.3*B6.2^2*B6.1^(-1)*B6.2^(-1)*B6.3^(-1)*B6.4^(-1)*B6.5^(-2),
# B6.1*B6.3*B6.5*B6.4^2*B6.3*B6.2*B6.1*B6.3^(-1)*B6.4^(-1)*B6.2^(-1)*B6.3^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.1^2*B6.3^2*B6.5*B6.4^2*B6.5*B6.2^(-1)*B6.3^(-1)*B6.4^(-1)*B6.1^(-1)*B6.2^(-2),
# B6.1^2*B6.3*B6.5*B6.4^2*B6.3*B6.2*B6.3^(-1)*B6.4^(-2)*B6.5^(-1)*B6.3^(-1)*B6.1^(-2),
# B6.1*B6.4^2*B6.3*B6.2*B6.3^(-1)*B6.4^(-2)*B6.1^(-1),
# B6.1^2*B6.3*B6.2*B6.4*B6.3*B6.1^(-1)*B6.2^(-1)*B6.3^(-1)*B6.4^(-2),
# B6.1^2*B6.4^2*B6.3*B6.2^2*B6.1^(-1)*B6.2^(-1)*B6.3^(-1)*B6.4^(-2),
# B6.1^2*B6.3*B6.2*B6.4^2*B6.3*B6.4^(-1)*B6.1^(-1)*B6.2^(-2),
# B6.1^2*B6.3*B6.2^2*B6.5*B6.4*B6.3*B6.4*B6.5^(-1)*B6.2^(-1)*B6.3^(-2)*B6.1^(-2),
# B6.1^2*B6.3*B6.2*B6.5*B6.4^2*B6.3*B6.4^(-1)*B6.1^(-1)*B6.2^(-1)*B6.3^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.1^2*B6.3^2*B6.2*B6.5*B6.4*B6.3*B6.4^(-1)*B6.5^(-1)*B6.2^(-1)*B6.3^(-2)*B6.1^(-2),
# B6.1^2*B6.3^2*B6.2*B6.5^2*B6.4*B6.2*B6.5^(-1)*B6.3^(-1)*B6.4^(-1)*B6.1^(-1)*B6.2^(-2),
# B6.1^2*B6.3*B6.2*B6.5*B6.4*B6.3*B6.5^(-2)*B6.4^(-1)*B6.1^(-1)*B6.2^(-2),
# B6.1^2*B6.3*B6.2^2*B6.5*B6.4*B6.3*B6.2*B6.5^(-2)*B6.3^(-1)*B6.4^(-1)*B6.1^(-1)*B6.2^(-2),
# B6.1*B6.5^2*B6.4*B6.3^2*B6.2^2*B6.3^(-1)*B6.4^(-1)*B6.5^(-2)*B6.2^(-1)*B6.1^(-1),
# B6.1^2*B6.5^2*B6.4*B6.3^2*B6.2*B6.3^(-1)*B6.4^(-1)*B6.5^(-2)*B6.1^(-1)*B6.2^(-2),
# B6.3^2*B6.2*B6.1^3*B6.2^(-1)*B6.3^(-2),
# B6.3*B6.5*B6.4^2*B6.3*B6.2*B6.1*B6.2^(-1)*B6.3^(-1)*B6.4^(-2)*B6.5^(-1)*B6.3^(-1),
# B6.3*B6.5*B6.3*B6.2*B6.4*B6.3^2*B6.4*B6.5^(-1)*B6.1^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-1),
# B6.2*B6.4*B6.3^2*B6.2*B6.1^2*B6.2^(-1)*B6.3^(-1)*B6.4^(-1)*B6.1^(-1)*B6.2^(-2),
# B6.2^2*B6.4*B6.3^2*B6.4*B6.1^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-1),
# B6.2^2*B6.4*B6.3^2*B6.5^2*B6.4^(-1)*B6.5^(-1)*B6.1^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-1),
# B6.3*B6.5*B6.3*B6.2*B6.1*B6.4*B6.3*B6.2*B6.3^(-1)*B6.4^(-1)*B6.1^(-1)*B6.2^(-1)*B6.3^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.3*B6.5*B6.3*B6.2*B6.1*B6.4*B6.1*B6.3*B6.2^(-1)*B6.3^(-1)*B6.4^(-2)*B6.5^(-1)*B6.3^(-1)*B6.1^(-1),
# B6.2^2*B6.1*B6.4*B6.3*B6.2^3*B6.3^(-1)*B6.4^(-1)*B6.1^(-1)*B6.2^(-2),
# B6.2^2*B6.1*B6.4*B6.3^2*B6.4^(-2)*B6.2^(-1)*B6.3^(-1)*B6.1^(-2),
# B6.2^2*B6.1*B6.4^2*B6.3*B6.4^(-1)*B6.2^(-1)*B6.3^(-1)*B6.1^(-2),
# B6.2^2*B6.1*B6.4*B6.3*B6.5^2*B6.3*B6.4^(-1)*B6.5^(-1)*B6.2^(-1)*B6.3^(-1)*B6.1^(-2),
# B6.3*B6.5*B6.3*B6.2*B6.4*B6.3^2*B6.1*B6.4^(-2)*B6.5^(-1)*B6.2^(-1)*B6.3^(-1)*B6.1^(-2),
# B6.4^2*B6.3*B6.2^2*B6.1*B6.2^(-2)*B6.3^(-1)*B6.4^(-2),
# B6.2^2*B6.1*B6.5^2*B6.4*B6.3*B6.2^2*B6.3^(-2)*B6.4^(-1)*B6.5^(-2)*B6.1^(-2),
# B6.3^2*B6.2*B6.1^2*B6.2*B6.1^(-2)*B6.2^(-1)*B6.3^(-2),
# B6.1*B6.2*B6.4*B6.3*B6.5*B6.4^2*B6.5*B6.1^(-2)*B6.2^(-1)*B6.3^(-2),
# B6.1*B6.2*B6.4*B6.3*B6.5^2*B6.4*B6.1^(-2)*B6.2^(-1)*B6.3^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.4^2*B6.3*B6.2*B6.1^2*B6.3^(-2)*B6.4^(-2)*B6.2^(-1)*B6.1^(-1),
# B6.4^2*B6.3*B6.2^2*B6.3*B6.2^(-2)*B6.3^(-1)*B6.4^(-2),
# B6.1^2*B6.3*B6.2^2*B6.1*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.1*B6.3*B6.5*B6.4^2*B6.3*B6.2^2*B6.3*B6.2^(-2)*B6.3^(-1)*B6.4^(-2)*B6.5^(-1)*B6.3^(-1)*B6.1^(-1),
# B6.1*B6.3*B6.2^2*B6.5*B6.4^2*B6.3*B6.1^(-1)*B6.4^(-1)*B6.1^(-1)*B6.2^(-1)*B6.3^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.5^2*B6.4*B6.3^2*B6.2*B6.3^(-2)*B6.4^(-1)*B6.5^(-2),
# B6.1*B6.3*B6.5*B6.4^2*B6.3*B6.2^2*B6.1*B6.2^(-2)*B6.3^(-1)*B6.4^(-2)*B6.5^(-1)*B6.3^(-1)*B6.1^(-1),
# B6.5^2*B6.4*B6.3^2*B6.4*B6.3^(-2)*B6.4^(-1)*B6.5^(-2),
# B6.5^2*B6.4*B6.3*B6.2^2*B6.4^(-2)*B6.5^(-2)*B6.3^(-1)*B6.2^(-1),
# B6.1*B6.2^2*B6.4*B6.3^2*B6.4*B6.3^(-2)*B6.4^(-1)*B6.2^(-2)*B6.1^(-1),
# B6.2^2*B6.1*B6.4*B6.3*B6.2^2*B6.3*B6.4^(-1)*B6.3^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.1*B6.2*B6.4^2*B6.3^2*B6.2*B6.3^(-2)*B6.4^(-2)*B6.2^(-1)*B6.1^(-1),
# B6.1*B6.2*B6.4^2*B6.3^2*B6.4*B6.3^(-2)*B6.4^(-2)*B6.2^(-1)*B6.1^(-1),
# B6.1*B6.2^2*B6.4*B6.3^2*B6.2*B6.3^(-2)*B6.4^(-1)*B6.2^(-2)*B6.1^(-1),
# B6.2^2*B6.4*B6.3^2*B6.2*B6.3^(-2)*B6.4^(-1)*B6.2^(-2),
# B6.2^2*B6.1*B6.4*B6.3*B6.2^2*B6.1*B6.2^(-2)*B6.3^(-1)*B6.4^(-1)*B6.1^(-1)*B6.2^(-2),
# B6.1^2*B6.3*B6.2^2*B6.4*B6.3*B6.4^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.1^2*B6.3*B6.2^2*B6.5*B6.4*B6.3^2*B6.5*B6.4^(-1)*B6.3^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.1^2*B6.3*B6.2^2*B6.4^2*B6.3*B6.2^(-2)*B6.3^(-1)*B6.4^(-1)*B6.1^(-1)*B6.2^(-2),
# B6.1^2*B6.3*B6.2^2*B6.3*B6.4^3*B6.3^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.2*B6.3^2*B6.5*B6.4^2*B6.5*B6.4^(-2)*B6.5^(-1)*B6.3^(-2)*B6.2^(-1),
# B6.2*B6.3*B6.5^2*B6.4^2*B6.3*B6.4^(-2)*B6.5^(-2)*B6.3^(-1)*B6.2^(-1),
# B6.1*B6.2^2*B6.5^2*B6.3*B6.4^2*B6.3*B6.4^(-2)*B6.3^(-1)*B6.5^(-2)*B6.2^(-2)*B6.1^(-1),
# B6.1*B6.3*B6.2^2*B6.1*B6.5*B6.4*B6.5*B6.3^(-2)*B6.4^(-1)*B6.2^(-2),
# B6.1^2*B6.3*B6.2^2*B6.5*B6.4*B6.3*B6.5*B6.2^(-2)*B6.3^(-1)*B6.4^(-1)*B6.1^(-1)*B6.2^(-2),
# B6.1^2*B6.3*B6.2^2*B6.5*B6.4*B6.3^3*B6.4^(-1)*B6.5^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.1*B6.3*B6.2^2*B6.1*B6.5*B6.4^2*B6.3^(-2)*B6.4^(-1)*B6.2^(-1)*B6.3^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.1^2*B6.3*B6.2^2*B6.5*B6.4^2*B6.3*B6.4^(-2)*B6.5^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.3*B6.5*B6.3*B6.4^2*B6.3*B6.4^(-2)*B6.3^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.3*B6.5*B6.3*B6.2*B6.4*B6.3^2*B6.2*B6.3^(-2)*B6.4^(-1)*B6.2^(-1)*B6.3^(-1)*B6.5^(-1)*B6.3^(-1),
# B6.1*B6.2^2*B6.5^2*B6.3*B6.4^2*B6.5*B6.4^(-2)*B6.3^(-1)*B6.5^(-2)*B6.2^(-2)*B6.1^(-1),
# B6.1^2*B6.3*B6.2^2*B6.5*B6.3*B6.4*B6.3^(-1)*B6.5^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.1^2*B6.3*B6.2^2*B6.5*B6.3*B6.5*B6.4^2*B6.5^(-1)*B6.4^(-1)*B6.3^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.1^2*B6.3^2*B6.2*B6.5^2*B6.4*B6.3*B6.5^(-1)*B6.4^(-1)*B6.3^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.2*B6.3*B6.5^2*B6.4^2*B6.5*B6.4^(-2)*B6.5^(-2)*B6.3^(-1)*B6.2^(-1),
# B6.2*B6.3^2*B6.5*B6.4^2*B6.3*B6.4^(-2)*B6.5^(-1)*B6.3^(-2)*B6.2^(-1),
# B6.1^2*B6.3^2*B6.2*B6.5*B6.4^2*B6.3^(-1)*B6.4^(-1)*B6.5^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.1^2*B6.3^2*B6.2*B6.5^2*B6.4*B6.5*B6.3^(-1)*B6.4^(-1)*B6.5^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.2^2*B6.4*B6.3^2*B6.5*B6.4*B6.5^(-1)*B6.3^(-2)*B6.4^(-1)*B6.2^(-2),
# B6.2^2*B6.1*B6.4*B6.3*B6.5^2*B6.2*B6.4^(-2)*B6.5^(-1)*B6.3^(-2)*B6.1^(-2),
# B6.1^2*B6.3*B6.2^2*B6.3*B6.4^2*B6.5*B6.4^(-2)*B6.3^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.1^2*B6.3*B6.2^2*B6.3*B6.4^2*B6.3*B6.4^(-2)*B6.3^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.1^2*B6.3*B6.2^2*B6.3*B6.4*B6.5^2*B6.3^(-2)*B6.4^(-1)*B6.5^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.1^2*B6.3*B6.2^2*B6.5*B6.4*B6.3^2*B6.4*B6.3^(-2)*B6.4^(-1)*B6.5^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2),
# B6.1^2*B6.3*B6.2^2*B6.5*B6.4*B6.3^2*B6.2*B6.3^(-2)*B6.4^(-1)*B6.5^(-1)*B6.2^(-2)*B6.3^(-1)*B6.1^(-2)];
#
#G6_unopt := Subgroup(B6, G6_unopt_gens);
#Print("Index of G6 = ", Index(B6, G6_unopt), "\n");
#G6_core := Core(B6, G6_unopt);
#Print("Index of Core(G6) in B6 = ", Index(B6,G6_core), "\n");
