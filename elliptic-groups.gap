LoadPackage("ACE");
TCENUM := ACETCENUM;;
LoadPackage("FR");


B3 := SurfaceBraidFpGroup(3,0,1);

x := B3.2^(-1) * B3.1;
y := B3.1 * B3.2^(-1);
equinodals_G3 := [B3.1^(-1) * B3.2 * B3.1, B3.2 * B3.1 * B3.2^(-1), x*B3.2*x^(-1), y*B3.1*y^(-1)];
antinodals_G3 := [B3.1^3, B3.2^3, B3.2^(-1)*B3.1^3*B3.2, B3.1 * B3.2^3 * B3.1^(-1)];
G3_gens := Concatenation(equinodals_G3, antinodals_G3);
G3_gens_squares := List(G3_gens, g -> g^2);
G3 := Subgroup(B3, G3_gens);
H3 := NormalClosure(G3,G3_gens_squares);
nat3 := NaturalHomomorphismByNormalSubgroup(G3,H3);
L3 := Image(nat3);

iso3_gens := IsomorphismFpGroupByGenerators(G3, G3_gens);
iso3 := IsomorphismFpGroup(G3);
fp3 := Image(iso3);
fp3_gens := Image(iso3_gens);

Print("### 3 Strands ###", "\n", "\n");

Print("## Best Presentation ##", "\n", "\n");
Print(fp3, "\n");
Print(RelatorsOfFpGroup(fp3), "\n");

Print("## Equi/Anti Presentation ##", "\n", "\n");

Print(fp3_gens, "\n");
Print(RelatorsOfFpGroup(fp3_gens), "\n");

Print("\n", "### 4 Strands ###", "\n", "\n");

B4 := SurfaceBraidFpGroup(4,0,1);

G4_gens := [B4.1^(3), B4.2^(3), B4.3^(3), B4.1^(-1)*B4.2*B4.1,
			B4.1^(-1)*B4.3^(3)*B4.1, B4.2^(-1)*B4.1^(3)*B4.2, B4.2^(-1)*B4.3*B4.2,
 			B4.3^(-1)*B4.1*B4.3*B4.1^(2), B4.3^(-1)*B4.2^(3)*B4.3,
 			B4.1^(-2)*B4.2*B4.1*B4.2, B4.1^(-2)*B4.3^(3)*B4.1^(2), B4.1^(-1)*B4.3^(-1)*B4.1*B4.3,
 			B4.1^(-1)*B4.3^(-1)*B4.2^(3)*B4.3*B4.1,
 			B4.2^(-1)*B4.1^(-1)*B4.2^(2)*B4.1^(2), B4.2^(-1)*B4.1^(-1)*B4.3*B4.1*B4.2,
 			B4.2^(-2)*B4.1*B4.2^(2), B4.2^(-2)*B4.3*B4.2*B4.3,
 			B4.3^(-1)*B4.2^(-1)*B4.1*B4.2*B4.3, B4.3^(-1)*B4.2^(-1)*B4.3^(2)*B4.2^(2),
			B4.3^(-2)*B4.1*B4.3^(2)*B4.1^(2), B4.3^(-2)*B4.2*B4.3^(2),
 			B4.1^(-2)*B4.2^(-1)*B4.1*B4.2*B4.1^(2), B4.1^(-2)*B4.2^(-1)*B4.3^(3)*B4.2*B4.1^(2),
 			B4.1^(-2)*B4.3^(-1)*B4.1*B4.3*B4.1, B4.1^(-2)*B4.3^(-1)*B4.2*B4.3*B4.1^(2),
 			B4.1^(-1)*B4.3^(-1)*B4.2^(-1)*B4.1^(2)*B4.2^(2)*B4.3, B4.1^(-1)*B4.3^(-1)*B4.2^(-1)*B4.3*B4.2*B4.3*B4.1,
 			B4.1^(-1)*B4.3^(-2)*B4.1*B4.3^(2), B4.1^(-1)*B4.3^(-2)*B4.2^(3)*B4.3^(2)*B4.1,
 			B4.2^(-1)*B4.1^(-2)*B4.2*B4.1^(2)*B4.2, B4.2^(-1)*B4.1^(-2)*B4.3*B4.1^(2)*B4.2,
 			B4.2^(-2)*B4.3^(-1)*B4.1*B4.3*B4.2^(2), B4.2^(-2)*B4.3^(-1)*B4.2*B4.3*B4.2^(2),
 			B4.3^(-1)*B4.2^(-2)*B4.1*B4.2*B4.3*B4.1, B4.3^(-1)*B4.2^(-2)*B4.3*B4.2^(2)*B4.3,
 			B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.1*B4.3*B4.2*B4.1^(2),
 			B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.2^(2)*B4.3^(2)*B4.1^(2),
 			B4.1^(-2)*B4.3^(-2)*B4.1*B4.3^(2)*B4.1,
 			B4.1^(-2)*B4.3^(-2)*B4.2*B4.3*B4.2*B4.1^(2),
 			B4.1^(-1)*B4.3^(-1)*B4.2^(-2)*B4.1*B4.2^(2)*B4.3*B4.1,
 			B4.1^(-1)*B4.3^(-1)*B4.2^(-2)*B4.3*B4.2*B4.3^(2)*B4.1,
 			B4.1^(-1)*B4.3^(-2)*B4.2^(-1)*B4.1*B4.2*B4.3^(2)*B4.1,
 			B4.1^(-1)*B4.3^(-2)*B4.2^(-1)*B4.3^(2)*B4.2^(2)*B4.3*B4.1,
 			B4.3^(-1)*B4.2^(-2)*B4.1^(-1)*B4.2*B4.1*B4.2^(2)*B4.3,
 			B4.3^(-1)*B4.2^(-2)*B4.1^(-1)*B4.3*B4.1*B4.2^(2)*B4.3,
 			B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.1*B4.3^(2)*B4.2*B4.1^(2),
 			B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2*B4.3^(2)*B4.2*B4.1^(2),
 			B4.1^(-2)*B4.3^(-2)*B4.2^(-1)*B4.1^(2)*B4.2^(2)*B4.3^(2)*B4.1,
 			B4.1^(-2)*B4.3^(-2)*B4.2^(-1)*B4.3*B4.2*B4.3^(2)*B4.1^(2),
 			B4.1^(-1)*B4.3^(-1)*B4.2^(-2)*B4.3^(-1)*B4.1*B4.3*B4.2^(2)*B4.3*B4.1,
 			B4.1^(-1)*B4.3^(-1)*B4.2^(-2)*B4.3^(-1)*B4.2*B4.3*B4.2^(2)*B4.3*B4.1,
 			B4.1^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1*B4.2*B4.3^(2)*B4.1^(2),
 			B4.1^(-1)*B4.3^(-2)*B4.2^(-2)*B4.3*B4.2^(2)*B4.3^(2)*B4.1,
 			B4.1^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2*B4.1*B4.2^(2)*B4.3^(2)*B4.1,
 			B4.1^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.3*B4.1*B4.2^(2)*B4.3^(2)*B4.1];
G4 := Subgroup(B4, G4_gens);

iso4_gens := IsomorphismFpGroupByGenerators(G4, G4_gens);
iso4 := IsomorphismFpGroup(G4);
fp4 := Image(iso4);
fp4_gens := Image(iso4_gens);

Print("## Best Presentation ##", "\n", "\n");
Print(fp4, "\n");
Print(RelatorsOfFpGroup(fp4), "\n");

Print("## Our Sage Presentation ##", "\n", "\n");

Print(fp4_gens, "\n");
Print(RelatorsOfFpGroup(fp4_gens), "\n");

Print("\n", "### 4 Strands with Equi/Antinodals ###");


G4_equi := [B4.1^(-1)*B4.2*B4.1,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.1*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-1)*B4.2*B4.1*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.1*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.3*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.1*B4.3*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.1*B4.3^2*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2*B4.3^2*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2*B4.1*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-1)*B4.3*B4.1*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3*B4.1^2*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.1*B4.2*B4.1^2*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.1*B4.3*B4.2*B4.1^2*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.2*B4.3*B4.2*B4.1^2*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-1)*B4.1*B4.2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.3*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2*B4.1*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-1)*B4.3*B4.1*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-1)*B4.3*B4.2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.1*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.1*B4.3*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.2*B4.3*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-1)*B4.1^(-1)*B4.2*B4.1*B4.2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-1)*B4.1^(-1)*B4.3*B4.1*B4.2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
		 B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2^(-1)*B4.3*B4.2*B4.1*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2];

G4_anti := [B4.1^3,
		 	B4.2^3,
			B4.3^3,
			B4.1^3,
			B4.1^(-1)*B4.3^3*B4.1,
			B4.1^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2*(B4.2^2*B4.1^2)^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^3*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.3^3*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2^3*B4.1*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.3^3*B4.1*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^3*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^3*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-1)*B4.3^2*(B4.3*B4.1)^2*B4.1*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^3*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^3*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.3^2*(B4.3*B4.1^2)^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^3*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.2^3*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^3*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^3*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^(-1)*B4.2^3*B4.3*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2*(B4.2^2*B4.1^2)^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2*(B4.2^2*B4.1^2)^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^(-1)*B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.2^2*B4.1^2*B4.3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^3*B4.1^2,
			B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^3*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.1^2,
			B4.1^3,
			B4.1^(-2)*B4.2^3*B4.1^2,
			B4.1^(-2)*B4.3^3*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^3*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-2)*B4.3^3*B4.1^2*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-1)*B4.1^3*B4.2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^3*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2*(B4.2^2*B4.1^2)^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^3*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-1)*B4.1^3*B4.2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2^(-1)*B4.1^2*(B4.1*B4.2)^2*B4.2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2,
			B4.1^(-2)*B4.2^(-2)*B4.1^(-2)*B4.2^(-1)*B4.3^(-2)*B4.2^(-2)*B4.1^(-1)*B4.2^3*B4.1*B4.2^2*B4.3^2*B4.2*B4.1^2*B4.2^2*B4.1^2];
G4_equianti_gens := Concatenation(G4_anti, G4_equi);

G4_equianti := Subgroup(B4, G4_equianti_gens);
G4_equianti_squares := List(G4_equianti_gens, g -> g^2);
# H4 := NormalClosure(G4,G4_equianti_squares : hard, Wo := 10^7);
# L4 := G4/H4;


iso4_equianti := IsomorphismFpGroup(G4_equianti);

fp4_equianti := Image(iso4_equianti);
fp4_squares := List(G4_equianti_squares, g -> iso4_equianti(g));
H4_fp := NormalClosure(fp4_equianti, fp4_squares);
nat4_fp := NaturalHomomorphismByNormalSubgroup(fp4_equianti,H4_fp);

nat4 := CompositionMapping(nat4_fp, iso4_equianti);
L4_fp := Image(nat4_fp);
L4 := Image(nat4);

Print("## Best Presentation ##", "\n", "\n");
Print(fp4_equianti, "\n");

#Print("## Presentation of G4/<<equi^2/anti^2>> ##", "\n", "\n");
#Print(RelatorsOfFpGroup(fp4_equianti), "\n");

# Print("## Our Equi/Anti Presentation ##", "\n", "\n");
#
#
# iso4_equianti_gens := IsomorphismFpGroupByGenerators(G4_equianti, G4_equianti);
# fp4_equianti_gens := Image(iso4_equianti_gens);
# Print(fp4_equianti_gens, "\n");
# Print(RelatorsOfFpGroup(fp4_equianti_gens), "\n");

### Burau Rep ###

Lam := FunctionField(Rationals,1);
t := IndeterminatesOfFunctionField(Lam)[1];
# t.name := "t";

construct_U := function (i,n)
	local I1, I2, U;
	I1 := IdentityMat(i-1,Lam);
	I2 := IdentityMat(n-i-1,Lam);
	U := IdentityMat(2,Lam);
	U[1][1] := 1-t;
	U[2][1] := t;

	# Hacky Way to do Conversions
	U[1][2] := (t+1)-t;
	U[2][2] := t-t;

	return DirectSumMat([I1,U,I2]);
end;

